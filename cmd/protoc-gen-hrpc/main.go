package main

import (
	"flag"
	"fmt"
	"strings"

	"github.com/joesonw/proto-tools/pkg/genutil"
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	pkgContext = protogen.GoImportPath("context")
	pkgProto   = protogen.GoImportPath("google.golang.org/protobuf/proto")
	pkgHrpc    = protogen.GoImportPath("github.com/joesonw/hrpc")
	pkgHttp    = protogen.GoImportPath("net/http")
)

func main() {
	var (
		flags        flag.FlagSet
		importPrefix = flags.String("import_prefix", "", "prefix to prepend to import paths")
	)
	importRewriteFunc := func(importPath protogen.GoImportPath) protogen.GoImportPath {
		switch importPath {
		case "context", "fmt", "math":
			return importPath
		}
		if *importPrefix != "" {
			return protogen.GoImportPath(*importPrefix) + importPath
		}
		return importPath
	}
	protogen.Options{
		ParamFunc:         flags.Set,
		ImportRewriteFunc: importRewriteFunc,
	}.Run(func(gen *protogen.Plugin) error {
		for _, file := range gen.Files {
			if !file.Generate {
				continue
			}

			err := genutil.New(gen.NewGeneratedFile(file.GeneratedFilenamePrefix+"_hrpc.pb.go", file.GoImportPath), func(g *genutil.G) genutil.Generator {
				return &Generator{
					G:    g,
					file: file,
				}
			}).Generate()
			if err != nil {
				return fmt.Errorf("unable to generate file %q: %w", file.Desc.Name(), err)
			}
		}
		return nil
	})
}

type Generator struct {
	*genutil.G
	file *protogen.File
}

func (g *Generator) Generate() error {
	g.P("// Code generated by protoc-gen-hrpc. DO NOT EDIT. ")
	g.P("package ", g.file.GoPackageName)
	g.P("")

	for _, svc := range g.file.Services {
		for _, method := range svc.Methods {
			if method.Desc.IsStreamingServer() || method.Desc.IsStreamingClient() {
				return fmt.Errorf("unable to generate stream methods %q", method.Desc.FullName())
			}
		}
	}

	for _, svc := range g.file.Services {
		g.genClientInterface(svc)
		g.genClient(svc)
		g.genServerInterface(svc)
		g.genService(svc)
	}

	return nil
}

func (g *Generator) genService(svc *protogen.Service) {
	g.F("func Register%sServer(hrpcServer *%s, server %sServer) {", svc.GoName, pkgHrpc.Ident("Server"), svc.GoName)
	g.F("hrpcServer.RegisterService(&%s{", pkgHrpc.Ident("ServiceDesc"))
	g.F("Name: %q,", svc.Desc.FullName())
	g.F("Server: server,")
	g.F("Methods: []*%s{", pkgHrpc.Ident("MethodDesc"))
	for _, method := range svc.Methods {
		g.genServiceMethod(method)
	}
	g.F("},")
	g.F("})")
	g.F("}")
}

func (g *Generator) genServiceMethod(method *protogen.Method) {
	g.F("{")
	g.F("Name: %q,", method.GoName)
	g.F("NewRequest: func() %s {", pkgProto.Ident("Message"))
	g.F("return &%s{}", method.Input.GoIdent)
	g.F("},")
	g.F("HandleFunc: func(r *%s, body %s) (%s, error) {", pkgHttp.Ident("Request"), pkgProto.Ident("Message"), pkgProto.Ident("Message"))
	g.F("return server.%s(r.Context(), body.(*%s))", method.GoName, method.Input.GoIdent)
	g.F("},")
	g.F("},")
}

func (g *Generator) genServerInterface(svc *protogen.Service) {
	g.F("type %sServer interface {", svc.GoName)

	for _, method := range svc.Methods {
		g.genServerInterfaceMethod(method)
	}
	g.F("}")
}

func (g *Generator) genServerInterfaceMethod(method *protogen.Method) {
	g.F("%s(ctx %s, req *%s) (*%s, error)", method.GoName, pkgContext.Ident("Context"), method.Input.GoIdent, method.Output.GoIdent)
}

func (g *Generator) genClientInterface(svc *protogen.Service) {
	g.F("type %sClient interface {", svc.GoName)

	for _, method := range svc.Methods {
		g.genClientInterfaceMethod(method)
	}
	g.F("}")
}

func (g *Generator) genClientInterfaceMethod(method *protogen.Method) {
	g.F("%s(ctx %s, req *%s, opts... %s) (*%s, error)", method.GoName, pkgContext.Ident("Context"), method.Input.GoIdent, pkgHrpc.Ident("CallOption"), method.Output.GoIdent)
}

func (g *Generator) genClient(svc *protogen.Service) {
	name := strings.ToLower(svc.GoName[0:1]) + svc.GoName[1:]
	g.F("func New%sClient(client *%s) %sClient {", svc.GoName, pkgHrpc.Ident("Client"), svc.GoName)
	g.F("return &%sClient{", name)
	g.F("client: client,")
	g.F("}")
	g.F("}")
	g.F("")

	g.F("type %sClient struct {", name)
	g.F("client *%s", pkgHrpc.Ident("Client"))
	g.F("}")
	g.F("")

	for _, method := range svc.Methods {
		g.genClientMethod(method)
	}
}

func (g *Generator) genClientMethod(method *protogen.Method) {
	svc := method.Parent
	name := strings.ToLower(svc.GoName[0:1]) + svc.GoName[1:]

	g.F("func (x *%sClient) %s(ctx %s, in *%s, opts... %s) (*%s, error) {", name, method.GoName, pkgContext.Ident("Context"), method.Input.GoIdent, pkgHrpc.Ident("CallOption"), method.Output.GoIdent)
	g.F("out := &%s{}", method.Output.GoIdent)
	g.F("err := x.client.Invoke(ctx, %q, in, out, opts...)", getFullName(method))
	g.F("if err != nil { return nil, err }")
	g.F("return out, nil")
	g.F("}")
}

func getFullName(method *protogen.Method) string {
	return fmt.Sprintf("/%s/%s", method.Parent.Desc.FullName(), method.Desc.Name())
}
